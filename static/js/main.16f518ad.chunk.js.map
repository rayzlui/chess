{"version":3,"sources":["logo.svg","actions/actionTypes.js","views/GridView.js","helperFunctons/pieceMoves.js","helperFunctons/copiesBoard.js","helperFunctons/checkFunctions.js","helperFunctons/moveFunctions.js","views/GameBoardView.js","containers/GameBoardContainer.js","actions/actions.js","containers/RootViewContainer.js","views/RootView.js","helperFunctons/pieceCreaters.js","helperFunctons/placePieces.js","helperFunctons/setupStart.js","helperFunctons/pawnRankUp.js","helperFunctons/reducerFunctions.js","reducers/boardReducer.js","reducers/rootReducer.js","reducers/turnReducer.js","App.js","configureStore.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MOVE","WHITE_MOVE","BLACK_MOVE","Grid","props","click","piece","color","id","react_default","a","createElement","className","concat","key","onClick","pawnMove","currentLocation","board","enpassant","moves","_dependencies$color","Object","slicedToArray","white","black","direction","startingLocations","basicMoveForward","push","includes","leftedge","rightedge","map","x","move","rookMove","king","arguments","length","undefined","check","direction1","straightMoves","direction2","direction3","Math","floor","direction4","limit","i","castle","name","bishopMove","dist","diagonalMoves","rowlimits","y","moveupdown","moveleftrigght","rowlimit","getMoves","chosenpiece","queenMove","leftrightlimits","forEach","arr","leftrightmove","updownmove","knightMove","kingMove","copyBoard","assign","isCheck","allColorPieces","gameboard","allMoves","j","notMyPiece","isCheckMate","attackingPieces","defendingPieces","piecesLocations","slice","indexOfPiece","rival","willMoveCauseCheck","previous","target","copyboard","opponentPieces","moveOnBoard","currentBoard","movePieceOnBoard","opponentAtTarget","indexOf","splice","GameBoard","turn","opponentPiece","movePiece","_useState","useState","_useState2","legalMoves","updateMoveOptions","_useState3","_useState4","selectedPiece","changePiece","display","row","gridWhite","_loop","image","pieceAtI","targetMove","alert","element","GameBoardContainer","connect","state","blackPieces","whitePieces","dispatch","type","colorMove","RootViewContainer","checkMate","header","checkMessage","toUpperCase","ImageCreator","url","src","alt","Pawn","King","Queen","Rook","Bishop","Knight","setHigherLevel","spot","rowIndex","startingPieceLocations","locations","placePieces","setKing","setQueen","setKnight","setBishop","setRook","location","setPawn","rankUpPawn","boardEnd","prompt","toLowerCase","trim","choosePiece","pawnLevelUp","updatePieces","oldPiece","pieces","indexPrevious","oldBoard","possibleEnpassant","abs","runMove","action","_ref","_ref2","attacking","defending","shouldBeKing","shouldBeRook","isCastleMove","results","isLeft","kingsLanding","rooksLanding","castleMove","result","copyCurrentPiece","checkEnpassant","wasEnpassantMove","index","removeOpponentPiece","initialState","placeWhite","makeBoard","setupPlayingBoard","rootReducer","combineReducers","stateUpdates","store","createStore","applyMiddleware","apply","App","es","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16f518ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const MOVE = 'MOVE';\nexport const WHITE_MOVE = 'WHITE_MOVE'\nexport const BLACK_MOVE = 'BLACK_MOVE'","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Grid(props) {\n  const { click, piece, color, id } = props;\n  return (\n    <section className={`grid ${id} ${color}`} key={id} onClick={click}>\n      {piece}\n    </section>\n  );\n}\n\nGrid.propTypes = {\n  click: PropTypes.func,\n  piece: PropTypes.object,\n  color: PropTypes.string,\n  id: PropTypes.number,\n};\n","export function pawnMove(currentLocation, board, color, enpassant) {\n  //for en passant if pawn is on the 4th row from bottom or top aka 32 - 39 and 40 - 48 and opponent piece jumps two forward.\n  //first move, attackable options, en passe, normal move\n  const dependencies = {\n    white: [-1, [48, 49, 50, 51, 52, 53, 54, 55]],\n    black: [1, [8, 9, 10, 11, 12, 13, 14, 15]],\n  };\n  let moves = [];\n  let [direction, startingLocations] = dependencies[color];\n  //basic move\n  let basicMoveForward = currentLocation + direction * 8;\n  if (basicMoveForward > 63 || basicMoveForward < 0) {\n    //if it's an end of board we return it. however, this should already have been ranked up.\n    return moves;\n  }\n  if (board[basicMoveForward] === null) {\n    moves.push(basicMoveForward);\n    if (\n      //first move from starting location allows two moves.\n      startingLocations.includes(currentLocation) &&\n      board[basicMoveForward + 8 * direction] === null\n    ) {\n      moves.push(basicMoveForward + 8 * direction);\n    }\n  }\n  let leftedge = [0, 8, 16, 24, 32, 40, 48, 56];\n  let rightedge = leftedge.map(x => x + 7);\n  if (\n    //if there's a piece adjacent forward that can be taken\n    board[basicMoveForward - 1] &&\n    board[basicMoveForward - 1].color !== color &&\n    !leftedge.includes(basicMoveForward)\n  ) {\n    moves.push(basicMoveForward - 1);\n  }\n\n  if (\n    //if there's a piece adjacent forward that can be taken\n\n    board[basicMoveForward + 1] &&\n    board[basicMoveForward + 1].color !== color &&\n    !rightedge.includes(basicMoveForward)\n  ) {\n    moves.push(basicMoveForward + 1);\n  }\n\n  //en passant\n  if (enpassant) {\n    let move = direction * 8;\n    if (enpassant === currentLocation + 1) {\n      moves.push(enpassant + move);\n    }\n    if (enpassant === currentLocation - 1) {\n      moves.push(enpassant + move);\n    }\n  }\n\n  return moves;\n}\n\nexport function kingMove(currentLocation, board, check) {\n  let moves = rookMove(currentLocation, board, true, check).concat(\n    bishopMove(currentLocation, board, 2),\n  );\n  return moves;\n}\n\nexport function queenMove(currentLocation, board) {\n  let move = bishopMove(currentLocation, board).concat(\n    rookMove(currentLocation, board),\n  );\n  return move;\n}\n\nexport function rookMove(currentLocation, board, king = false, check = false) {\n  let direction1 = straightMoves(\n    board,\n    currentLocation,\n    king,\n    check,\n    currentLocation % 8,\n    -1,\n  );\n  let direction2 = straightMoves(\n    board,\n    currentLocation,\n    king,\n    check,\n    7 - (currentLocation % 8),\n    1,\n  );\n  let direction3 = straightMoves(\n    board,\n    currentLocation,\n    king,\n    check,\n    Math.floor(currentLocation / 8),\n    -8,\n  );\n  let direction4 = straightMoves(\n    board,\n    currentLocation,\n    king,\n    check,\n    Math.floor((63 - currentLocation) / 8),\n    8,\n  );\n\n  return direction1.concat(direction2.concat(direction3.concat(direction4)));\n}\n\nexport function straightMoves(\n  board,\n  currentLocation,\n  king,\n  check,\n  limit,\n  direction,\n) {\n  let moves = [];\n  for (let i = 1; i <= limit; i++) {\n    let move = currentLocation + direction * i;\n\n    if (!(king && i > 1)) {\n      if (board[move] === null) {\n        moves.push(move);\n      } else {\n        if (board[move].color !== board[currentLocation].color) {\n          moves.push(move);\n        }\n\n        return moves;\n      }\n    }\n    if (king && check === false && board[currentLocation].castle === true) {\n      //if current piece is king and its not castled nor in check\n      if (board[move]) {\n        //in the loop, if there is a piece here\n        if (board[move].name === 'Rook' && board[move].castle === true) {\n          //and that piece is a rook and it is not castled.\n          moves.push(move);\n          return moves;\n        } else {\n          //however if there is a piece and it's not the rook, we stop.\n          return moves;\n        }\n      }\n    }\n  }\n  return moves;\n}\n\nexport function bishopMove(currentLocation, board, dist = 10) {\n  //moves: until limit or piece, essentially its [[-1,-1],[1,-1],[-1,1],[1,1]] until it reaches an edge or piece\n  //it's just +/- 7 and 9 until there's a blockage or end of board\n  let direction1 = diagonalMoves(dist, currentLocation, -1, -1, board);\n  let direction2 = diagonalMoves(dist, currentLocation, 1, -1, board);\n  let direction3 = diagonalMoves(dist, currentLocation, 1, 1, board);\n  let direction4 = diagonalMoves(dist, currentLocation, -1, 1, board);\n\n  return direction1.concat(direction2.concat(direction3.concat(direction4)));\n}\nexport function rowlimits(currentLocation) {\n  return [\n    currentLocation - (currentLocation % 8),\n    currentLocation - (currentLocation % 8) + 7,\n  ];\n}\n\nexport function diagonalMoves(dist, currentLocation, x, y, board) {\n  let moves = [];\n  for (let i = 1; i < dist; i++) {\n    let moveupdown = currentLocation + x * i * 8;\n    if (moveupdown < 64 && moveupdown >= 0) {\n      let moveleftrigght = moveupdown + y * i;\n      let rowlimit = rowlimits(moveupdown);\n      if (moveleftrigght >= rowlimit[0] && moveleftrigght <= rowlimit[1]) {\n        if (board[moveleftrigght] === null) {\n          moves.push(moveleftrigght);\n        } else {\n          if (board[moveleftrigght].color !== board[currentLocation].color) {\n            moves.push(moveleftrigght);\n          }\n          break;\n        }\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  return moves;\n}\n\nexport function knightMove(currentLocation, board) {\n  //move: 3, limit or piece on it. all combos of +-1,+-2\n  let moves = [];\n  //essentially possible moves are [-17, -15, -10, -6, +6, +10, +15, +17], but the math doesn't work on the sides aka \"teleporting to other side of board\"\n  let movements = [\n    [1, 2],\n    [-1, 2],\n    [1, -2],\n    [-1, -2],\n    [2, 1],\n    [2, -1],\n    [-2, 1],\n    [-2, -1],\n  ];\n  let leftrightlimits = rowlimits(currentLocation);\n  movements.forEach(arr => {\n    let leftrightmove = currentLocation + arr[0];\n    //need to go left/right and see if it goes over limit at the row and then need to go up/down and see if it goes over imit at that column\n    //aka id = 6 so left/right = [0,7], so anything with arr[1] = +2 fails. and up/down = [6, 62] so anything with arr[0] = -1/-2 fails\n    if (\n      leftrightmove >= leftrightlimits[0] &&\n      leftrightmove <= leftrightlimits[1]\n    ) {\n      let updownmove = leftrightmove + 8 * arr[1];\n      if (updownmove >= 0 && updownmove <= 63) {\n        if (\n          board[updownmove] === null ||\n          board[updownmove].color !== board[currentLocation].color\n        ) {\n          moves.push(updownmove);\n        }\n      }\n    }\n  });\n\n  return moves;\n}\n\nexport function getMoves(currentLocation, board, enpassant, check) {\n  //use a switch for name of piece to get possible moves. use color to determine if paths are blocked/can't land there.\n  //we can have 4 different arrays that hold the \"paths\" for piece, each array iterates where the absolute value is further from the grid id.\n  let chosenpiece = board[currentLocation];\n\n  switch (chosenpiece.name) {\n    case 'Queen':\n      return queenMove(currentLocation, board);\n\n    case 'Bishop':\n      return bishopMove(currentLocation, board);\n\n    case 'Rook':\n      return rookMove(currentLocation, board);\n\n    case 'Knight':\n      return knightMove(currentLocation, board);\n\n    case 'King':\n      return kingMove(currentLocation, board, check);\n\n    default:\n      return chosenpiece.color === 'white'\n        ? pawnMove(currentLocation, board, 'white', enpassant)\n        : pawnMove(currentLocation, board, 'black', enpassant);\n  }\n}\n","export function copyBoard(board) {\n  return Object.assign({}, board)\n}\n","import { movePieceOnBoard } from './moveFunctions';\nimport { getMoves } from './pieceMoves';\nimport { copyBoard } from './copiesBoard';\n\nexport function isCheck(allColorPieces, gameboard) {\n  //this needs to know board AND pieces to check if there is check.\n  let board = copyBoard(gameboard);\n  for (let i = 0; i < allColorPieces.length; i++) {\n    let piece = allColorPieces[i];\n    let allMoves = getMoves(piece, board);\n    for (let j = 0; j < allMoves.length; j++) {\n      let move = allMoves[j];\n      if (board[move]) {\n        const notMyPiece = !allColorPieces.includes(move);\n        if (board[move].name === 'King' && notMyPiece) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nexport function isCheckMate(attackingPieces, board, defendingPieces) {\n  //checkmate goes through every piece of the player being checked, gets every move for each piece and\n  //checks each move and sees if it still results in a check with that move. remember check function is the aggressors pieces.\n\n  let piecesLocations = defendingPieces.slice();\n  for (let i = 0; i < piecesLocations.length; i++) {\n    let indexOfPiece = piecesLocations[i];\n    let rival = attackingPieces.slice();\n\n    let moves = getMoves(indexOfPiece, board);\n    for (let j = 0; j < moves.length; j++) {\n      let move = moves[j];\n      let causesCheck = willMoveCauseCheck(board, indexOfPiece, move, rival);\n\n      if (!causesCheck) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport function willMoveCauseCheck(board, previous, target, rival) {\n  //this function checks if your move causes the mover to be checked, aka your bishop is blocking your king from being checked and you want to move that bishop.\n  let copyboard = copyBoard(board);\n  let opponentPieces = rival.slice();\n\n  let moveOnBoard = movePieceOnBoard(copyboard, previous, target);\n  let opponentAtTarget = opponentPieces.indexOf(target);\n  if (opponentAtTarget !== -1) {\n    opponentPieces.splice(opponentAtTarget, 1);\n  }\n  //we just need the board to check\n  return isCheck(opponentPieces, moveOnBoard);\n}\n","import { copyBoard } from \"./copiesBoard\";\n\n//these are dispatches.\n\nexport function movePieceOnBoard(currentBoard, previous, target) {\n  let board = copyBoard(currentBoard);\n  let piece = board[previous];\n  board[previous] = null;\n  board[target] = piece;\n  return board;\n}\n\nexport function updatePieceIndex(allColorPieces, previous, target) {\n  let allPieces = allColorPieces.slice();\n  let index = allPieces.indexOf(previous);\n  allPieces.splice(index, 1, target);\n  return allPieces;\n}\n ","import React, { useState } from 'react';\nimport { Grid } from './GridView';\nimport { getMoves } from '../helperFunctons/pieceMoves';\nimport { willMoveCauseCheck } from '../helperFunctons/checkFunctions';\nimport PropTypes from 'prop-types';\n\nexport function GameBoard(props) {\n  const { board, turn, opponentPiece, movePiece, enpassant, check } = props;\n  const [legalMoves, updateMoveOptions] = useState([]);\n  const [selectedPiece, changePiece] = useState(null);\n  let display = [];\n  let row = [];\n  let gridWhite = true;\n\n  for (let i = 0; i < 64; i++) {\n    let click;\n    let color = gridWhite ? 'white' : 'blue';\n    let image = null;\n    let pieceAtI = board[i];\n    if (pieceAtI) {\n      image = pieceAtI.image;\n      click =\n        pieceAtI.color === turn\n          ? () => {\n              changePiece(i);\n              //check is needed for castling, enpassant is needed for pawn.\n              updateMoveOptions(getMoves(i, board, enpassant, check));\n            }\n          : () => null;\n    }\n    if (legalMoves.includes(i)) {\n      let targetMove = i;\n      color = 'green';\n      click = () => {\n        let causesCheck = willMoveCauseCheck(\n          board,\n          selectedPiece,\n          targetMove,\n          opponentPiece,\n        );\n        if (!causesCheck) {\n          movePiece(selectedPiece, targetMove, turn); // this will be a dispatch\n          updateMoveOptions([]);\n        } else {\n          alert('This move will cause you to be checked.');\n        }\n      };\n    }\n    let element = (\n      <Grid key={i} id={i} color={color} piece={image} click={click} />\n    );\n    gridWhite = !gridWhite;\n    row.push(element);\n    if (row.length === 8) {\n      display.push(<li key={i / 8}>{row}</li>);\n      row = [];\n      gridWhite = !gridWhite;\n    }\n  }\n  return (\n    <section className=\"gameboard\">\n      <ul className=\"board__row\">{display}</ul>\n    </section>\n  );\n}\n\nexport default GameBoard;\n\nGameBoard.propTypes = {\n  board: PropTypes.object,\n  turn: PropTypes.bool,\n  opponentPiece: PropTypes.array,\n  movePiece: PropTypes.func,\n  enpassant: PropTypes.bool,\n  check: PropTypes.bool,\n};\n","import { connect } from 'react-redux';\nimport { movePiece, moveWhite, moveBlack } from '../actions/actions';\nimport GameBoard from '../views/GameBoardView';\n\nfunction mapStateToProps(state) {\n  return {\n    board: state.board.board,\n    turn: state.turn,\n    opponentPiece:\n      state.turn === 'white'\n        ? state.board.blackPieces\n        : state.board.whitePieces,\n    enpassant: state.board.enpassant,\n    check: state.board.check,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    movePiece: (previous, target, color) => {\n      dispatch(movePiece(previous, target, color));\n      dispatch(color === 'white' ? moveWhite() : moveBlack());\n    },\n  };\n}\n\nexport const GameBoardContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GameBoard);\n","import { MOVE, WHITE_MOVE, BLACK_MOVE } from './actionTypes';\n\nexport function movePiece(previous, target, color) {\n  return { type: MOVE, previous: previous, target: target, colorMove: color };\n}\n\nexport function moveWhite() {\n  return { type: WHITE_MOVE };\n}\n\nexport function moveBlack() {\n  return { type: BLACK_MOVE };\n}\n","import { connect } from \"react-redux\";\nimport { RootView } from \"../views/RootView\";\n\nfunction mapStateToProps(state) {\n  return {\n    turn: state.turn,\n    checkMate: state.board.checkMate,\n    check: state.board.check\n  };\n}\n\nexport const RootViewContainer = connect(\n  mapStateToProps,\n  null\n)(RootView);\n","import React from 'react';\nimport { GameBoardContainer } from '../containers/GameBoardContainer';\nimport PropTypes from 'prop-types';\n\nexport function RootView(props) {\n  const { turn, checkMate, check } = props;\n\n  let header;\n  let checkMessage = null;\n  if (checkMate) {\n    header = <p className=\"turn\">{`Game Over ${turn} Wins!`.toUpperCase()}</p>;\n  } else {\n    header = <p className=\"turn\">{`${turn} TURN`.toUpperCase()}</p>;\n  }\n  if (check) {\n    checkMessage = <p className=\"check\">{'CHECK'}</p>;\n  }\n\n  return (\n    <div className=\"chess__container\">\n      <section className=\"chess__header\">\n        <h1>CHESS GAME!</h1>\n        {header}\n        {checkMessage}\n      </section>\n      <GameBoardContainer />\n    </div>\n  );\n}\n\nRootView.propTypes = {\n  turn: PropTypes.string,\n  checkMate: PropTypes.bool,\n  check: PropTypes.bool,\n};\n","import React from 'react';\n\nfunction ImageCreator(name, url) {\n  return <img className={`${name}`} src={`${url}`} alt={`${name}`} />;\n}\n\nexport function Pawn(color) {\n  return {\n    name: 'Pawn',\n    color: color,\n    image:\n      color === 'white'\n        ? ImageCreator(\n            'white__pawn',\n            'https://images.cdn2.stockunlimited.net/clipart/chess-piece_1489848.jpg',\n          )\n        : ImageCreator(\n            'blackpawn',\n            'https://cdn3.iconfinder.com/data/icons/chess-7/100/black_pawn-512.png',\n          ),\n  };\n}\n\nexport function King(color) {\n  return {\n    name: 'King',\n    color: color,\n    image:\n      color === 'white'\n        ? ImageCreator(\n            'white king',\n            'https://cdn2.iconfinder.com/data/icons/chess-set-pieces/100/Chess_Set_01-White-Classic-King-512.png',\n          )\n        : ImageCreator(\n            'blackking',\n            'https://c7.uihere.com/files/941/949/299/battle-chess-chess-piece-bishop-king-chess-pieces.jpg',\n          ),\n    castle: true,\n  };\n}\n\nexport function Queen(color) {\n  return {\n    name: 'Queen',\n    color: color,\n    image:\n      color === 'white'\n        ? ImageCreator(\n            'whitequeen',\n            'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQStyqGa8IPghZxLXe7CzwwSkI3xolt4ZwWtoDgg0I9fGef3aPlw&s',\n          )\n        : ImageCreator(\n            'blackqueen',\n            'https://p7.hiclipart.com/preview/532/888/1/battle-chess-queen-chess-piece-king-chess-game.jpg',\n          ),\n  };\n}\n\nexport function Rook(color) {\n  return {\n    name: 'Rook',\n    color: color,\n    image:\n      color === 'white'\n        ? ImageCreator(\n            'whiterook',\n            'https://www.netclipart.com/pp/m/66-669058_chess-castle-tower-figure-piece-white-game-play.png',\n          )\n        : ImageCreator(\n            'blackrook',\n            'https://cdn.clipart.email/f7622d8973944f3c9bde0f6ed6b4b1cb_chess-piece-rook-icon-iconexperience-professional-icons-o-_512-512.png',\n          ),\n    castle: true,\n  };\n}\n\nexport function Bishop(color) {\n  return {\n    name: 'Bishop',\n    color: color,\n    image:\n      color === 'white'\n        ? ImageCreator(\n            'whitebis',\n            'https://cdn.clipart.email/a350502c54942d259683b1eedd076a1e_chess-battle-figure-game-checkmate-bishop-icon_512-512.png',\n          )\n        : ImageCreator(\n            'blackbis',\n            'https://cdn.iconscout.com/icon/premium/png-512-thumb/bishop-black-games-battle-checkmate-chess-camel-figure-58246.png',\n          ),\n  };\n}\n\nexport function Knight(color) {\n  return {\n    name: 'Knight',\n    color: color,\n    image:\n      color === 'white'\n        ? ImageCreator(\n            'whiteknight',\n            'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGuH1y85WNKVYXMcxF25Izj-lS6xf-dNTfkfVW8HeRepfx2Bn71g&s',\n          )\n        : ImageCreator(\n            'blackknight',\n            'https://png.pngtree.com/png-vector/20190505/ourlarge/pngtree-chess-knight--horse--logo-illustration-png-image_1021838.jpg',\n          ),\n  };\n}\n","import { King, Queen, Rook, Knight, Bishop, Pawn } from './pieceCreaters';\n\nfunction setPawn(color, board) {\n  let row = color === 'white' ? 48 : 8;\n  for (let i = 0; i < 8; i++) {\n    let location = i + row;\n    let piece = new Pawn(color);\n    board[location] = piece;\n  }\n  return board;\n}\n\nfunction setRook(color, board) {\n  return setHigherLevel(color, Rook, [0, 7], board);\n}\n\nfunction setKnight(color, board) {\n  return setHigherLevel(color, Knight, [1, 6], board);\n}\n\nfunction setBishop(color, board) {\n  return setHigherLevel(color, Bishop, [2, 5], board);\n}\n\nfunction setQueen(color, board) {\n  var spot = color === 'white' ? [3] : [4];\n  return setHigherLevel(color, Queen, spot, board);\n}\n\nfunction setKing(color, board) {\n  var spot = color === 'white' ? [4] : [3];\n  return setHigherLevel(color, King, spot, board);\n}\n\nfunction setHigherLevel(color, type, spot, board) {\n  const LAST_ROW = 56;\n  const TOP_ROW = 0;\n  var row = color === 'white' ? LAST_ROW : TOP_ROW;\n  var spots = spot.map(rowIndex => rowIndex + row);\n  spots.forEach(spot => {\n    let piece = new type(color);\n    board[spot] = piece;\n  });\n  return board;\n}\n\nexport { setKing, setQueen, setBishop, setRook, setPawn, setKnight };\n","import {\n  setKing,\n  setQueen,\n  setBishop,\n  setRook,\n  setPawn,\n  setKnight,\n} from './placePieces';\n\nexport function makeBoard() {\n  //we could just make this an object that has keys 0 - 63 and our 'moves' can just be Board[spot] = piece and Board[oldSpot] = null\n  const board = {};\n  for (var i = 0; i < 64; i++) {\n    board[i] = null;\n  }\n  return board;\n}\n\nexport function setupPlayingBoard() {\n  const board = makeBoard();\n  let placeWhite = placePieces('white', board);\n  let placeBlack = placePieces('black', placeWhite);\n\n  return placeBlack;\n}\n\nexport function startingPieceLocations(color) {\n  let locations = [];\n  for (let i = 0; i < 16; i++) {\n    if (color === 'black') {\n      locations.push(i);\n    } else {\n      locations.push(i + 48);\n    }\n  }\n  return locations;\n}\n\nexport function placePieces(color, board) {\n  let placePawns = setPawn(color, board);\n  let placeRooks = setRook(color, placePawns);\n  let placeBishops = setBishop(color, placeRooks);\n  let placeKnights = setKnight(color, placeBishops);\n  let placeQueen = setQueen(color, placeKnights);\n  let placeKing = setKing(color, placeQueen);\n  return placeKing;\n}\n","import { Queen, Bishop, Rook, Knight } from './pieceCreaters';\nexport function rankUpPawn(chosenpiece, id) {\n  let boardEnd =\n    chosenpiece.color === 'white'\n      ? [0, 1, 2, 3, 4, 5, 6, 7]\n      : [56, 57, 58, 59, 60, 61, 62, 63];\n  if (chosenpiece.name === 'Pawn' && boardEnd.includes(id)) {\n    //a pawn can never go backwards on to its own back row so no need to check for color.\n    return pawnLevelUp(chosenpiece.color);\n  }\n  return chosenpiece;\n}\n\nexport function choosePiece() {\n  let piecename = prompt(\n    'YOUR PAWN HAS BEEN COMPLETED ITS JOURNEY, PLEASE WHAT IT SHALL NOW BECOME',\n    'Queen Bishop Knight Rook',\n  );\n\n  let piece = piecename.toLowerCase().trim();\n  while (!['queen', 'knight', 'rook', 'bishop'].includes(piece)) {\n    prompt(\n      'YOUR PAWN HAS BEEN COMPLETED ITS JOURNEY, TYPE IN WHICH PIECE YOU WOULD LIKE IT TO BECOME',\n      'Queen Bishop Knight Rook',\n    );\n    piece = piece.toLowerCase().trim();\n  }\n  return piece;\n}\n\nexport function pawnLevelUp(color) {\n  let piece = choosePiece();\n  switch (piece) {\n    case 'queen':\n      return new Queen(color);\n    case 'bishop':\n      return new Bishop(color);\n    case 'rook':\n      return new Rook(color);\n    default:\n      return new Knight(color);\n  }\n}\n","import { copyBoard } from './copiesBoard';\nimport { rankUpPawn } from './pawnRankUp';\nimport { isCheck, isCheckMate } from './checkFunctions';\n\nexport function isCastleMove(board, previous, target, color) {\n  let shouldBeKing = board[previous];\n  let shouldBeRook = board[target];\n  if (shouldBeKing === null || shouldBeRook === null) return false;\n  if (color === 'white') {\n    return (\n      shouldBeKing.castle &&\n      shouldBeRook.castle &&\n      shouldBeRook.color === 'white'\n    );\n  } else {\n    return (\n      shouldBeKing.castle &&\n      shouldBeRook.castle &&\n      shouldBeRook.color === 'black'\n    );\n  }\n}\n\nexport function castleMove(board, pieces, previous, target) {\n  let isLeft = target % 8 === 0 ? 1 : -1;\n  let kingsLanding = target + isLeft;\n  let rooksLanding = target + isLeft * 2;\n  board[previous].castle = false;\n  board[target].castle = false;\n  board = movePieceOnBoard(board, previous, kingsLanding);\n  board = movePieceOnBoard(board, target, rooksLanding);\n  pieces = updatePieces(pieces, previous, kingsLanding);\n  pieces = updatePieces(pieces, target, rooksLanding);\n  return { board: board, pieces: pieces };\n}\n\nexport function updatePieces(oldPiece, previous, target) {\n  let pieces = oldPiece.slice();\n  let indexPrevious = pieces.indexOf(previous);\n  if (target) {\n    pieces.splice(indexPrevious, 1, target);\n  } else {\n    pieces.splice(indexPrevious, 1);\n  }\n  return pieces;\n}\n\nexport function movePieceOnBoard(oldBoard, previous, target) {\n  let board = Object.assign({}, oldBoard);\n  board[target] = board[previous];\n  board[previous] = null;\n  return board;\n}\n\nexport function removeOpponentPiece(pieces, target) {\n  let index = pieces.indexOf(target);\n  if (index !== -1) {\n    pieces.splice(index, 1);\n  }\n  return pieces;\n}\n\nexport function possibleEnpassant(piece, previous, target) {\n  if (piece.name === 'Pawn') {\n    if (Math.abs(previous - target) === 16) {\n      return target;\n    }\n  }\n  return null;\n}\n\nexport function wasEnpassantMove(\n  previous,\n  board,\n  target,\n  enpassant,\n  defending,\n) {\n  let piece = board[previous];\n  if (piece.name === 'Pawn') {\n    if (\n      piece.color === 'white'\n        ? target === enpassant - 8\n        : target === enpassant + 8\n    ) {\n      defending = updatePieces(defending, enpassant);\n      board[enpassant] = null;\n    }\n  }\n  return { defending: defending, board: board };\n}\n\nexport function runMove(state, action) {\n  const { previous, target, colorMove } = action;\n  let blackPieces = state.blackPieces.slice();\n  let whitePieces = state.whitePieces.slice();\n  let board = copyBoard(state.board);\n  let [attacking, defending] =\n    colorMove === 'white'\n      ? [whitePieces, blackPieces]\n      : [blackPieces, whitePieces];\n\n  if (isCastleMove(board, previous, target, colorMove)) {\n    let results = castleMove(board, attacking, previous, target);\n    attacking = results.pieces;\n    board = results.board;\n    let result = {\n      board: board,\n      check: isCheck(attacking, board),\n      checkMate: isCheckMate(attacking, board, defending),\n    };\n    result[`${colorMove}Pieces`] = attacking;\n    return result;\n  } else {\n    let piece = board[previous];\n    let copyCurrentPiece = Object.assign({}, piece);\n    if (copyCurrentPiece.castle) {\n      copyCurrentPiece.castle = false;\n    }\n    let checkEnpassant = wasEnpassantMove(\n      previous,\n      board,\n      target,\n      state.enpassant,\n      defending,\n    );\n    board = checkEnpassant.board;\n    defending = checkEnpassant.defending;\n    attacking = updatePieces(attacking, previous, target);\n    defending = removeOpponentPiece(defending, target);\n    board = movePieceOnBoard(board, previous, target);\n    board[target] = rankUpPawn(copyCurrentPiece, target);\n\n    return {\n      board: board,\n      enpassant: possibleEnpassant(piece, previous, target),\n      whitePieces: colorMove === 'white' ? attacking : defending,\n      blackPieces: colorMove === 'white' ? defending : attacking,\n      check: isCheck(attacking, board),\n      checkMate: isCheckMate(attacking, board, defending),\n    };\n  }\n}\n","import { MOVE } from '../actions/actionTypes';\nimport {\n  startingPieceLocations,\n  setupPlayingBoard,\n} from '../helperFunctons/setupStart';\nimport { runMove } from '../helperFunctons/reducerFunctions';\n\nconst initialState = {\n  board: setupPlayingBoard(),\n  enpassant: null,\n  check: false,\n  blackPieces: startingPieceLocations('black'),\n  whitePieces: startingPieceLocations('white'),\n  checkMate: false,\n};\n\nexport function boardReducer(state = initialState, action) {\n  let stateUpdates;\n  switch (action.type) {\n    case MOVE:\n      stateUpdates = runMove(state, action);\n      return Object.assign({}, state, stateUpdates);\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { boardReducer } from './boardReducer';\nimport { turnReducer } from './turnReducer';\n\nexport const rootReducer = combineReducers({\n  board: boardReducer,\n  turn: turnReducer,\n});\n","import { WHITE_MOVE, BLACK_MOVE } from '../actions/actionTypes';\n\nexport function turnReducer(state = 'white', action) {\n  switch (action.type) {\n    case WHITE_MOVE:\n      return 'black';\n    case BLACK_MOVE:\n      return 'white';\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { RootViewContainer } from './containers/RootViewContainer';\nimport { configureStore } from './configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <RootViewContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { rootReducer } from './reducers/rootReducer';\n\nexport function configureStore() {\n  const middlewares = [];\n\n  if (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n  }\n\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}